<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.7.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied"
		class="org.zerock.security.CustomAccessDeniedHandler" />

	<!-- <bean id="customLoginSuccess"
		class="org.zerock.security.CustomLoginSuccessHandler" /> -->

	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"/> -->
	
	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<bean id="customUserDetailsService"
		class="org.zerock.security.CustomUserDetailsService" />

	<security:http>

		<!-- 특정 url에 접근할 때 인터셉터를 이용해서 접근을 제한 한다. pattern : 주소, access : 권한 -->
		<security:intercept-url pattern="/sample/all"
			access="permitAll" />

		<security:intercept-url
			pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />

		<security:intercept-url pattern="/sample/admin"
			access="hasRole('ROLE_ADMIN')" />

		<!-- error-page 속성이나 ref 속성 둘 중 하나만을 사용 함 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<security:access-denied-handler
			ref="customAccessDenied" />

		<!-- 권한에 맞는 페이지를 열어줌 -->
		<!-- <security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess" /> -->
		<security:form-login login-page="/customLogin" />

		<!-- <security:csrf disabled="true" /> -->

		<security:logout logout-url="/customLogout"
			invalidate-session="true" />

		<security:remember-me
			data-source-ref="dataSource" token-validity-seconds="604800" />

		<security:logout logout-url="/customLogout"
			invalidate-session="true" delete-cookies="remember-me,JSESSION_ID" />

	</security:http>

	<security:authentication-manager>

		<security:authentication-provider
			user-service-ref="customUserDetailsService">

			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->

			<!-- <security:password-encoder ref="customPasswordEncoder"/> -->

			<!-- p657 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select 
				userid, userpw, enabled from tbl_member where userid = ?" authorities-by-username-query="select 
				userid, auth from tbl_member_auth where userid = ?" /> -->

			<security:password-encoder
				ref="bcryptPasswordEncoder" />

		</security:authentication-provider>

	</security:authentication-manager>

</beans>

<!-- <security:user-service> 시큐리티 5버전부터 PasswordEncoder라는 존재를 이용하도록 변경 됨 
	패스워드에 인코딩처리 없이 사용하려면 {noop}을 추가하면 된다. <security:user name="member" password="{noop}member" 
	authorities="ROLE_MEMBER"/> <security:user name="admin" password="{noop}admin" 
	authorities="ROLE_MEMBER, ROLE_ADMIN"/> </security:user-service> -->